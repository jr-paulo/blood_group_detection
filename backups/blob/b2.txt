import cv2
import numpy as np;

def celldensity(picture):
    picture = cv2.resize(picture, (300, 300))
    picture = cv2.cvtColor(picture, cv2.COLOR_RGB2GRAY)
    p = picture.shape
    picture_white_count=0
    rows, cols = p
    for i in range(rows):
        for j in range(cols):
            if picture[i, j] == 255:
                picture_white_count = picture_white_count + 1
    print("white count is ",picture_white_count)
    if(picture_white_count<14000):
        return 1
    else: return 0

def countcluster(picture):
    im = cv2.cvtColor(picture, cv2.COLOR_RGB2GRAY)
    # Apply treshold
    ret, im = cv2.threshold(im, 240, 255, cv2.THRESH_BINARY)
    kernel = np.ones((3, 6), np.uint8)
    im = cv2.erode(im, kernel, iterations=2)
    # Setup SimpleBlobDetector parameters.
    params = cv2.SimpleBlobDetector_Params()
    # filter by color
    params.filterByColor = True
    params.blobColor = 255
    # Filter by Convexity
    params.filterByConvexity = True
    params.minConvexity = 0.01
    # Filter by Inertia
    params.filterByInertia = True
    params.minInertiaRatio = .01
    # Create a detector with the parameters
    ver = (cv2.__version__).split('.')
    if int(ver[0]) < 3:
        detector = cv2.SimpleBlobDetector(params)
    else:
        detector = cv2.SimpleBlobDetector_create(params)
    # Detect blobs.
    keypoints = detector.detect(im)
    # Draw detected blobs as red circles.
    # cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS ensures the size of the circle        corresponds to the size of blob
    im_with_keypoints = cv2.drawKeypoints(im, keypoints, np.array([]), (0, 0, 255),
                                          cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
    # Show keypoints
    cv2.imwrite("keypoints.jpg", im_with_keypoints)
    cv2.imshow("keypoint",im_with_keypoints)
    cv2.waitKey(0)
    print("Total of objects")
    print(len(keypoints))
    if len(keypoints) >= 2 :
        return 1
    else :
        return 0

# A negative

s1 = cv2.imread("sap1.jpg")
s2 = cv2.imread("sbp2.jpg")
s3 = cv2.imread("sbp3.jpg")

# A positive
'''
s1 = cv2.imread("sap1.jpg")
s2 = cv2.imread("sap2.jpg")
s3 = cv2.imread("sap3.jpg")
'''
# B positive
'''
s1 = cv2.imread("sbp1.jpg")
s2 = cv2.imread("sbp2.jpg")
s3 = cv2.imread("sbp3.jpg")
'''

s1_countcluster=countcluster(s1)
s2_countcluster=countcluster(s2)
s3_countcluster=countcluster(s3)
s1_white=celldensity(s1)
s2_white=celldensity(s2)
s3_white=celldensity(s3)


print("s1_white=",s1_white,"s2_white=",s2_white,"s3_white=",s3_white)
print("countcluster(s1) is ",s1_countcluster)
print("countcluster(s2) is ",s2_countcluster)
print("countcluster(s3) is ",s3_countcluster)

if s1_countcluster + s1_white == 2: A = 1
else: A = 0
if s2_countcluster + s2_white == 2: B = 1
else: B = 0
if s3_countcluster + s3_white == 2: Rh = 1
else: Rh = 0

blood_group = "BLOOD GROUP : "
if A == 1 :
    blood_group = blood_group + "A"
if B == 1 :
    blood_group = blood_group + "B"
if Rh == 1 :
    blood_group = blood_group + "Positive"
else :
    blood_group = blood_group + "Negative"

print(blood_group)

cv2.imshow('s1', s1)
cv2.imshow('s2', s2)
cv2.imshow('s3', s3)
cv2.waitKey(0)
cv2.destroyAllWindows()
